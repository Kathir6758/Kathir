import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from flask import Flask, render_template_string, request, redirect, url_for

app = Flask(__name__)

# Global variables to hold dataset, model, and evaluation metrics
heart_data = None
model = None
X_test = None
y_test = None
accuracy = None
precision = None
cm = None

# Folder to store uploaded datasets and generated plots
UPLOAD_FOLDER = 'uploads'
PLOT_FOLDER = 'static/plots'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['PLOT_FOLDER'] = PLOT_FOLDER

# Ensure necessary folders exist
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(PLOT_FOLDER, exist_ok=True)

# Predefined Q&A for Ask GenAI
qa_pairs = {
    "What is a heart attack?": "A heart attack occurs when blood flow to a part of the heart is blocked, usually by a blood clot.",
    "What are the early warning signs of a heart attack?": "Early signs include discomfort in the chest, fatigue, shortness of breath, and lightheadedness.",
    "How is a heart attack diagnosed?": "It is diagnosed using an electrocardiogram (ECG), blood tests, and imaging tests.",
    "Can a heart attack be prevented?": "Yes, by maintaining a healthy lifestyle, managing risk factors, and regular check-ups.",
    "What should I do if I'm at risk of a heart attack?": "Consult your doctor, take prescribed medications, and follow a healthy diet and exercise routine.",
    "What lifestyle changes can help prevent a heart attack?": "Eating a healthy diet, exercising regularly, quitting smoking, and managing stress can help prevent a heart attack.",
    "Why is high blood pressure a risk factor for heart attacks?": "High blood pressure can damage arteries, making them more prone to blockages that cause heart attacks.",
    "What role does cholesterol play in heart attacks?": "High cholesterol can lead to plaque buildup in arteries, increasing the risk of a heart attack.",
    "How does diabetes increase heart attack risk?": "Diabetes can damage blood vessels and nerves controlling the heart, raising the risk of heart disease and heart attacks.",
    "What is the importance of regular check-ups for heart health?": "Regular check-ups help detect and manage risk factors like high blood pressure and cholesterol, reducing the likelihood of a heart attack."
}

def load_data_and_train_model():
    global heart_data, model, X_test, y_test, accuracy, precision, cm
    # Load dataset
    heart_data = pd.read_csv(os.path.join(app.config['UPLOAD_FOLDER'], 'heart_attack_data.csv'))

    # Preprocessing
    le = LabelEncoder()
    for col in ['sex', 'cp', 'fbs', 'restecg', 'exng', 'slp', 'caa', 'thall']:
        heart_data[col] = le.fit_transform(heart_data[col])

    # Splitting dataset into features and target
    X = heart_data.drop('target', axis=1)
    y = heart_data['target']

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train a RandomForestClassifier
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # Calculate performance metrics
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)

    # Generate and save the confusion matrix plot
    plot_confusion_matrix()

def plot_confusion_matrix():
    """Generates a confusion matrix plot and saves it as an image."""
    global cm
    plt.figure(figsize=(6, 6))
    sns.heatmap(cm, annot=True, fmt="d", cmap="viridis", cbar=False,
                xticklabels=['No Heart Attack', 'Heart Attack'],
                yticklabels=['No Heart Attack', 'Heart Attack'])
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.title('Confusion Matrix', fontsize=14)
    plot_path = os.path.join(app.config['PLOT_FOLDER'], 'confusion_matrix.png')
    plt.savefig(plot_path)
    plt.close()

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        patient_id = request.form.get("patient_id")
        if patient_id.isdigit():
            return redirect(url_for('patient_info', patient_id=patient_id))
    return render_template_string("""
        <div style="background: pink; height: 100vh; display: flex; align-items: center; justify-content: center; font-family: Arial, sans-serif; color: black; text-align: center;">
            <div>
                <h1 style="font-size: 36px;">Heart Attack Prediction</h1>
                <img src="https://tse2.mm.bing.net/th?id=OIP.c-e3z6uRJevKket4BYZl6gHaEJ&pid=Api&P=0&h=220" alt="Heart Image" style="width: 300px; margin: 20px auto;">
                <h2 style="font-size: 30px;">Upload Dataset</h2>
                <form action="/upload" method="post" enctype="multipart/form-data">
                    <input type="file" name="file" required style="margin: 10px;">
                    <button type="submit" style="background: #007BFF; color: white; padding: 10px 20px; border: none; border-radius: 5px;">Upload</button>
                </form>
                <h3 style="margin-top: 30px;">Check Patient Risk</h3>
                <form method="post">
                    <input type="number" name="patient_id" placeholder="Enter Patient ID" required style="padding: 10px; margin: 10px;">
                    <button type="submit" style="background: #007BFF; color: white; padding: 10px 20px; border: none; border-radius: 5px;">Submit</button>
                </form>
                <div style="margin-top: 30px;">
                    <a href="{{ url_for('ask_genai') }}" style="text-decoration: none; color: white; background: #007BFF; padding: 10px 20px; border-radius: 5px;">Ask GenAI</a>
                </div>
            </div>
        </div>
    """)

@app.route("/upload", methods=["POST"])
def upload_file():
    file = request.files['file']
    if file:
        file.save(os.path.join(app.config['UPLOAD_FOLDER'], 'heart_attack_data.csv'))
        load_data_and_train_model()
        return redirect(url_for('index'))
    return "No file uploaded!", 400

@app.route("/ask_genai", methods=["GET", "POST"])
def ask_genai():
    response = None
    if request.method == "POST":
        question = request.form.get("query", "").strip()
        response = qa_pairs.get(question, "Sorry, I don't have an answer for that question.")
    return render_template_string("""
        <div style="background: pink; min-height: 100vh; padding: 20px; font-family: Arial, sans-serif; color: black;">
            <h1 style="text-align: center;">Ask GenAI</h1>
            <form method="post" style="text-align: center; margin-top: 20px;">
                <textarea name="query" placeholder="Ask a question about heart health..." rows="4" cols="50" required style="padding: 10px; border: 1px solid #ddd; border-radius: 5px;"></textarea><br>
                <button type="submit" style="background: #007BFF; color: white; padding: 10px 20px; margin-top: 10px; border: none; border-radius: 5px;">Submit</button>
            </form>
            {% if response %}
            <div style="margin-top: 20px; padding: 10px; background: #f9f9f9; border: 1px solid #ddd; border-radius: 5px;">
                <h3>Response:</h3>
                <p>{{ response }}</p>
            </div>
            {% endif %}
            <div style="text-align: center; margin-top: 20px;">
                <a href="{{ url_for('index') }}" style="text-decoration: none; color: #007BFF;">Back to Home</a>
            </div>
        </div>
    """, response=response)

@app.route("/patient_info/<patient_id>", methods=["GET"])
def patient_info(patient_id):
    global heart_data, model, accuracy, precision, cm
    patient = heart_data.iloc[int(patient_id)]
    patient_features = patient.drop('target')
    prediction = model.predict([patient_features])[0]
    prediction_text = "Heart Attack Risk: High" if prediction == 1 else "Heart Attack Risk: Low"
    prediction_style = "color: red; font-size: 50px;" if prediction == 1 else "color: green; font-size: 50px;"

    # Path to confusion matrix plot
    confusion_matrix_path = url_for('static', filename='plots/confusion_matrix.png')

    return render_template_string("""
        <div style="background: pink; min-height: 100vh; padding: 20px; font-family: Arial, sans-serif; color: black;">
            <h1 style="text-align: center;">Heart Attack Prediction</h1>
            <table border="1" style="width: 100%; margin-bottom: 30px; text-align: left;">
                <tr><th>Patient ID</th><td>{{ patient_id }}</td></tr>
                {% for column, value in patient_data.items() %}
                    <tr><th>{{ column }}</th><td>{{ value }}</td></tr>
                {% endfor %}
            </table>
            <div style="text-align: center;">
                <p style="{{ prediction_style }}">{{ prediction_text }}</p>
            </div>
            <h2>Model Performance</h2>
            <p><strong>Accuracy:</strong> {{ accuracy }}</p>
            <p><strong>Precision:</strong> {{ precision }}</p>
            <img src="{{ confusion_matrix_path }}" alt="Confusion Matrix" style="width: 400px;">
            <div style="text-align: center; margin-top: 20px;">
                <a href="{{ url_for('index') }}" style="text-decoration: none; color: #007BFF;">Back to Home</a>
            </div>
        </div>
    """, patient_id=patient_id, prediction_text=prediction_text, prediction_style=prediction_style, patient_data=patient.to_dict(),
       accuracy=accuracy, precision=precision, confusion_matrix_path=confusion_matrix_path)

if __name__ == "__main__":
    app.run(debug=True)
